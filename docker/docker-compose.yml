services:
  db:
    profiles: ["run", "dev"]
    build:
      context: .
      dockerfile: backend/database/dockerfile.pq
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      docker_valhalla_network:
        ipv4_address: 172.20.0.2
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 1s
      retries: 3

  proxy_dev:
    profiles: ["dev"]
    build:
      context: .
      dockerfile: backend/dev/dockerfile.nginx
    networks:
      docker_valhalla_network:
        ipv4_address: 172.20.0.10
    depends_on:
      api_dev:
        condition: service_started
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/v1/hello || exit 1"]
      interval: 60s
      timeout: 3s
      retries: 5

  proxy:
    profiles: ["run"]
    build:
      context: .
      dockerfile: backend/run/dockerfile.nginx
    networks:
      docker_valhalla_network:
        ipv4_address: 172.20.0.10
    depends_on:
      api:
        condition: service_started
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/v1/hello || exit 1"]
      interval: 60s
      timeout: 3s
      retries: 5
  api:
    profiles: ["run"]
    build:
      context: .
      dockerfile: backend/run/dockerfile.api
    env_file:
      - backend/run/api.env
    networks:
      docker_valhalla_network:
        ipv4_address: 172.20.0.3
    depends_on:
      db:
        condition: service_healthy  # Wait for db service to be healthy
    restart: always
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db:5432/postgres
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/v1/hello || exit 1"]
      interval: 60s
      timeout: 3s
      retries: 5

  api_dev:
    profiles: ["dev"]
    build:
      context: .
      dockerfile: backend/dev/dockerfile.api
    env_file:
      - backend/dev/api.env
    networks:
      docker_valhalla_network:
        ipv4_address: 172.20.0.4
    volumes:
      - src_data:/usr/src/
    depends_on:
      db:
        condition: service_healthy
    restart: always
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db:5432/postgres
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/v1/hello || exit 1"]
      interval: 60s
      timeout: 3s
      retries: 5



  client_dev:
    profiles: ["dev_"]
    build:
      context: .
      dockerfile: dockerfile.client_dev
    env_file:
      - .env
    networks:
      docker_valhalla_network:
        ipv4_address: 172.20.0.7
    depends_on:
      api_dev:
        condition: service_healthy  # Wait for db service to be healthy
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 2s
      retries: 3

networks:
  docker_valhalla_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  db_data:
  src_data:
